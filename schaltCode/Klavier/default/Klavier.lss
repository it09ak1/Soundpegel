
Klavier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000242  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000045  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000258  00000000  00000000  000002fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000014c  00000000  00000000  00000553  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000032b  00000000  00000000  0000069f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  000009cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000013d  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001ee  00000000  00000000  00000b59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  00000d47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <InitADC>:


void InitADC()
{
	//PORTA = 0;
	PORTA = 0;
  6c:	1b ba       	out	0x1b, r1	; 27
	// ADC1 und ADC 0 (diese haben wir jetzt genommen)
	//ADMUX |= (1<<REFS0) | (1<<ADLAR) | (1<<MUX3) | (1<<MUX1) | (1<<MUX0);
	// 10x Verstaerkung
	//ADMUX |= (1<<REFS0) | (1<<MUX3) | (1<<MUX0);
	// ohne Verstaerkung
	ADMUX = (1<<REFS0);
  6e:	80 e4       	ldi	r24, 0x40	; 64
  70:	87 b9       	out	0x07, r24	; 7
	// ADC3 und ADC 2
	//ADMUX |= (1<<REFS0) | (1<<ADLAR) | (1<<MUX3) | (1<<MUX2) | (1<<MUX1) | (1<<MUX10);
	ADCSRA = (1 << ADEN) | (1 << ADPS1) | (1 << ADPS0) | ( 0 << ADPS2);
  72:	83 e8       	ldi	r24, 0x83	; 131
  74:	86 b9       	out	0x06, r24	; 6
}
  76:	08 95       	ret

00000078 <ReadADC>:

uint16_t ReadADC()
{
	ADCSRA |= (1 << ADSC);
  78:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1 << ADIF)));
  7a:	34 9b       	sbis	0x06, 4	; 6
  7c:	fe cf       	rjmp	.-4      	; 0x7a <ReadADC+0x2>

	ADCSRA |= (1 << ADIF);
  7e:	34 9a       	sbi	0x06, 4	; 6

	return(ADC);
  80:	24 b1       	in	r18, 0x04	; 4
  82:	35 b1       	in	r19, 0x05	; 5
}
  84:	c9 01       	movw	r24, r18
  86:	08 95       	ret

00000088 <MittelwertADC>:

uint16_t MittelwertADC()
{
  88:	ef 92       	push	r14
  8a:	ff 92       	push	r15
  8c:	0f 93       	push	r16
  8e:	1f 93       	push	r17
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	c0 e0       	ldi	r28, 0x00	; 0
  96:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  98:	9a e2       	ldi	r25, 0x2A	; 42
  9a:	e9 2e       	mov	r14, r25
  9c:	f1 2c       	mov	r15, r1
	uint16_t sum;
	uint16_t mittelwert;

	for (int i=0; i<=7;i++)
	{
		uint16_t singleValue = ReadADC();
  9e:	0e 94 3c 00 	call	0x78	; 0x78 <ReadADC>

		sum += singleValue;
  a2:	08 0f       	add	r16, r24
  a4:	19 1f       	adc	r17, r25
  a6:	84 ec       	ldi	r24, 0xC4	; 196
  a8:	99 e0       	ldi	r25, 0x09	; 9
  aa:	f7 01       	movw	r30, r14
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <MittelwertADC+0x24>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b2:	d9 f7       	brne	.-10     	; 0xaa <MittelwertADC+0x22>
uint16_t MittelwertADC()
{
	uint16_t sum;
	uint16_t mittelwert;

	for (int i=0; i<=7;i++)
  b4:	21 96       	adiw	r28, 0x01	; 1
  b6:	c8 30       	cpi	r28, 0x08	; 8
  b8:	d1 05       	cpc	r29, r1
  ba:	89 f7       	brne	.-30     	; 0x9e <MittelwertADC+0x16>
  bc:	98 01       	movw	r18, r16
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	36 95       	lsr	r19
  c2:	27 95       	ror	r18
  c4:	8a 95       	dec	r24
  c6:	e1 f7       	brne	.-8      	; 0xc0 <MittelwertADC+0x38>
	}

	mittelwert = sum/8;

	return mittelwert;
}
  c8:	c9 01       	movw	r24, r18
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	1f 91       	pop	r17
  d0:	0f 91       	pop	r16
  d2:	ff 90       	pop	r15
  d4:	ef 90       	pop	r14
  d6:	08 95       	ret

000000d8 <main>:

int main(void)
{
  d8:	8f 92       	push	r8
  da:	9f 92       	push	r9
  dc:	af 92       	push	r10
  de:	bf 92       	push	r11
  e0:	cf 92       	push	r12
  e2:	df 92       	push	r13
  e4:	ef 92       	push	r14
  e6:	ff 92       	push	r15
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
	//uint8_t ledOut = 0b00000000;
	DDRB = 0xff;
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x00;
  f2:	11 ba       	out	0x11, r1	; 17
	DDRA = 0x00;
  f4:	1a ba       	out	0x1a, r1	; 26


void InitADC()
{
	//PORTA = 0;
	PORTA = 0;
  f6:	1b ba       	out	0x1b, r1	; 27
	// ADC1 und ADC 0 (diese haben wir jetzt genommen)
	//ADMUX |= (1<<REFS0) | (1<<ADLAR) | (1<<MUX3) | (1<<MUX1) | (1<<MUX0);
	// 10x Verstaerkung
	//ADMUX |= (1<<REFS0) | (1<<MUX3) | (1<<MUX0);
	// ohne Verstaerkung
	ADMUX = (1<<REFS0);
  f8:	90 e4       	ldi	r25, 0x40	; 64
  fa:	97 b9       	out	0x07, r25	; 7
	// ADC3 und ADC 2
	//ADMUX |= (1<<REFS0) | (1<<ADLAR) | (1<<MUX3) | (1<<MUX2) | (1<<MUX1) | (1<<MUX10);
	ADCSRA = (1 << ADEN) | (1 << ADPS1) | (1 << ADPS0) | ( 0 << ADPS2);
  fc:	93 e8       	ldi	r25, 0x83	; 131
  fe:	96 b9       	out	0x06, r25	; 6
	DDRB = 0xff;
	DDRD = 0x00;
	DDRA = 0x00;

	InitADC();
	PORTB = (uint8_t)(~(0b00000000));
 100:	88 bb       	out	0x18, r24	; 24
	int programm = 0;
	int maxValue = 0;
	uint16_t abzugswert = 0;
	uint8_t maxVumeter = 0b00000000;

	abzugswert = MittelwertADC();
 102:	0e 94 44 00 	call	0x88	; 0x88 <MittelwertADC>
 106:	5c 01       	movw	r10, r24
 108:	ee 24       	eor	r14, r14
 10a:	ff 24       	eor	r15, r15
 10c:	cc 24       	eor	r12, r12
 10e:	dd 24       	eor	r13, r13
 110:	10 e0       	ldi	r17, 0x00	; 0
 112:	4a e2       	ldi	r20, 0x2A	; 42
 114:	84 2e       	mov	r8, r20
 116:	91 2c       	mov	r9, r1

	while(1)
	{
		value = ReadADC();
 118:	0e 94 3c 00 	call	0x78	; 0x78 <ReadADC>
		value = value - abzugswert;
		value = abs(value);
 11c:	ec 01       	movw	r28, r24
 11e:	ca 19       	sub	r28, r10
 120:	db 09       	sbc	r29, r11
 122:	d7 ff       	sbrs	r29, 7
 124:	03 c0       	rjmp	.+6      	; 0x12c <main+0x54>
 126:	d0 95       	com	r29
 128:	c1 95       	neg	r28
 12a:	df 4f       	sbci	r29, 0xFF	; 255
		if (value > 100) {
			vumeter |= 0b10000000;
		}*/
		
		// programm Auswahl
		if (PIND == 0b11111110)
 12c:	80 b3       	in	r24, 0x10	; 16
 12e:	8e 3f       	cpi	r24, 0xFE	; 254
 130:	19 f4       	brne	.+6      	; 0x138 <main+0x60>
		{
			PORTB = PIND;
 132:	80 b3       	in	r24, 0x10	; 16
 134:	88 bb       	out	0x18, r24	; 24
 136:	15 c0       	rjmp	.+42     	; 0x162 <main+0x8a>
			programm = 1;
		}
		else if (PIND == 0b11111101)
 138:	80 b3       	in	r24, 0x10	; 16
 13a:	8d 3f       	cpi	r24, 0xFD	; 253
 13c:	19 f4       	brne	.+6      	; 0x144 <main+0x6c>
		{
			PORTB = PIND;
 13e:	80 b3       	in	r24, 0x10	; 16
 140:	88 bb       	out	0x18, r24	; 24
 142:	41 c0       	rjmp	.+130    	; 0x1c6 <main+0xee>
			programm = 2;
		}
		else if (PIND == 0b01111111)
 144:	80 b3       	in	r24, 0x10	; 16
 146:	8f 37       	cpi	r24, 0x7F	; 127
 148:	41 f4       	brne	.+16     	; 0x15a <main+0x82>
		{
			// loeschen der Werte	
			PORTB = PIND;
 14a:	80 b3       	in	r24, 0x10	; 16
 14c:	88 bb       	out	0x18, r24	; 24
			maxVumeter = 0b00000000;
			maxValue = 0;
			//programm = 0;
			abzugswert = MittelwertADC();
 14e:	0e 94 44 00 	call	0x88	; 0x88 <MittelwertADC>
 152:	5c 01       	movw	r10, r24
 154:	cc 24       	eor	r12, r12
 156:	dd 24       	eor	r13, r13
 158:	10 e0       	ldi	r17, 0x00	; 0
			//PORTB = (uint8_t)(~(0b00000000));
		}

		if (programm == 1)
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	e8 16       	cp	r14, r24
 15e:	f1 04       	cpc	r15, r1
 160:	71 f5       	brne	.+92     	; 0x1be <main+0xe6>
		{
			
				if (value > 40) {
 162:	c9 32       	cpi	r28, 0x29	; 41
 164:	d1 05       	cpc	r29, r1
 166:	08 f4       	brcc	.+2      	; 0x16a <main+0x92>
 168:	68 c0       	rjmp	.+208    	; 0x23a <main+0x162>
					vumeter |= 0b00000001;
				}
				if (value > 55) {
 16a:	c8 33       	cpi	r28, 0x38	; 56
 16c:	d1 05       	cpc	r29, r1
 16e:	10 f4       	brcc	.+4      	; 0x174 <main+0x9c>
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	1f c0       	rjmp	.+62     	; 0x1b2 <main+0xda>
					vumeter |= 0b00000010;
				}
				if (value > 85) {
 174:	c6 35       	cpi	r28, 0x56	; 86
 176:	d1 05       	cpc	r29, r1
 178:	10 f4       	brcc	.+4      	; 0x17e <main+0xa6>
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	1a c0       	rjmp	.+52     	; 0x1b2 <main+0xda>
					vumeter |= 0b00000100;
				}
				if (value > 100) {
 17e:	c5 36       	cpi	r28, 0x65	; 101
 180:	d1 05       	cpc	r29, r1
 182:	10 f4       	brcc	.+4      	; 0x188 <main+0xb0>
 184:	87 e0       	ldi	r24, 0x07	; 7
 186:	15 c0       	rjmp	.+42     	; 0x1b2 <main+0xda>
					vumeter |= 0b00001000;
				}
				if (value > 135) {
 188:	c8 38       	cpi	r28, 0x88	; 136
 18a:	d1 05       	cpc	r29, r1
 18c:	10 f4       	brcc	.+4      	; 0x192 <main+0xba>
 18e:	8f e0       	ldi	r24, 0x0F	; 15
 190:	10 c0       	rjmp	.+32     	; 0x1b2 <main+0xda>
					vumeter |= 0b00010000;
				}
				if (value > 170) {
 192:	cb 3a       	cpi	r28, 0xAB	; 171
 194:	d1 05       	cpc	r29, r1
 196:	10 f4       	brcc	.+4      	; 0x19c <main+0xc4>
 198:	8f e1       	ldi	r24, 0x1F	; 31
 19a:	0b c0       	rjmp	.+22     	; 0x1b2 <main+0xda>
					vumeter |= 0b00100000;
				}
				if (value > 190) {
 19c:	cf 3b       	cpi	r28, 0xBF	; 191
 19e:	d1 05       	cpc	r29, r1
 1a0:	10 f4       	brcc	.+4      	; 0x1a6 <main+0xce>
 1a2:	8f e3       	ldi	r24, 0x3F	; 63
 1a4:	06 c0       	rjmp	.+12     	; 0x1b2 <main+0xda>
					vumeter |= 0b01000000;
				}
				if (value > 200) {
 1a6:	c9 3c       	cpi	r28, 0xC9	; 201
 1a8:	d1 05       	cpc	r29, r1
 1aa:	10 f0       	brcs	.+4      	; 0x1b0 <main+0xd8>
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <main+0xda>
 1b0:	8f e7       	ldi	r24, 0x7F	; 127
			//value = ReadADC();
			//value -=850;
			//value = abs(value);
			//PORTB = (uint8_t)(~(value));
			//PORTB = (uint8_t)(~(ReadADC()));
			PORTB = (uint8_t)(~(vumeter));
 1b2:	80 95       	com	r24
 1b4:	88 bb       	out	0x18, r24	; 24
 1b6:	31 e0       	ldi	r19, 0x01	; 1
 1b8:	e3 2e       	mov	r14, r19
 1ba:	f1 2c       	mov	r15, r1
 1bc:	36 c0       	rjmp	.+108    	; 0x22a <main+0x152>
		}
		else if (programm == 2)
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	e8 16       	cp	r14, r24
 1c2:	f1 04       	cpc	r15, r1
 1c4:	91 f5       	brne	.+100    	; 0x22a <main+0x152>
		{
			// maximalen pust wert speichern
			// wenn maximal Pust wert groesser als der letzte ist
			if (value > maxValue)
 1c6:	cc 16       	cp	r12, r28
 1c8:	dd 06       	cpc	r13, r29
 1ca:	10 f0       	brcs	.+4      	; 0x1d0 <main+0xf8>
 1cc:	e6 01       	movw	r28, r12
 1ce:	26 c0       	rjmp	.+76     	; 0x21c <main+0x144>
				}
				if (value > 200) {
					vumeter |= 0b10000000;
				}*/

				if (value > 200) {
 1d0:	c9 3c       	cpi	r28, 0xC9	; 201
 1d2:	d1 05       	cpc	r29, r1
 1d4:	18 f1       	brcs	.+70     	; 0x21c <main+0x144>
					//vumeter |= 0b00000001;
					maxVumeter |= 0b00000001;
 1d6:	11 60       	ori	r17, 0x01	; 1
				}
				if (value > 215) {
 1d8:	c8 3d       	cpi	r28, 0xD8	; 216
 1da:	d1 05       	cpc	r29, r1
 1dc:	f8 f0       	brcs	.+62     	; 0x21c <main+0x144>
					//vumeter |= 0b00000010;
					maxVumeter |= 0b00000010;
 1de:	12 60       	ori	r17, 0x02	; 2
				}
				if (value > 355) {
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	c4 36       	cpi	r28, 0x64	; 100
 1e4:	d8 07       	cpc	r29, r24
 1e6:	d0 f0       	brcs	.+52     	; 0x21c <main+0x144>
					//vumeter |= 0b00000100;
					maxVumeter |= 0b00000100;
 1e8:	14 60       	ori	r17, 0x04	; 4
				}
				if (value > 425) {
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	ca 3a       	cpi	r28, 0xAA	; 170
 1ee:	d8 07       	cpc	r29, r24
 1f0:	a8 f0       	brcs	.+42     	; 0x21c <main+0x144>
					//vumeter |= 0b00001000;
					maxVumeter |= 0b00001000;
 1f2:	18 60       	ori	r17, 0x08	; 8
				}
				if (value > 565) {
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	c6 33       	cpi	r28, 0x36	; 54
 1f8:	d8 07       	cpc	r29, r24
 1fa:	80 f0       	brcs	.+32     	; 0x21c <main+0x144>
					//vumeter |= 0b00010000;
					maxVumeter |= 0b00010000;
 1fc:	10 61       	ori	r17, 0x10	; 16
				}
				if (value > 665) {
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	ca 39       	cpi	r28, 0x9A	; 154
 202:	d8 07       	cpc	r29, r24
 204:	58 f0       	brcs	.+22     	; 0x21c <main+0x144>
					//vumeter |= 0b00100000;
					maxVumeter |= 0b00100000;
 206:	10 62       	ori	r17, 0x20	; 32
				}
				if (value > 765) {
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	ce 3f       	cpi	r28, 0xFE	; 254
 20c:	d8 07       	cpc	r29, r24
 20e:	30 f0       	brcs	.+12     	; 0x21c <main+0x144>
					//vumeter |= 0b01000000;
					maxVumeter |= 0b01000000;
 210:	10 64       	ori	r17, 0x40	; 64
				}
				if (value > 845) {
 212:	83 e0       	ldi	r24, 0x03	; 3
 214:	ce 34       	cpi	r28, 0x4E	; 78
 216:	d8 07       	cpc	r29, r24
 218:	08 f0       	brcs	.+2      	; 0x21c <main+0x144>
					//vumeter |= 0b10000000;
					maxVumeter |= 0b10000000;
 21a:	10 68       	ori	r17, 0x80	; 128
				}

				maxValue = value;
			}

			PORTB = (uint8_t)(~(maxVumeter));
 21c:	81 2f       	mov	r24, r17
 21e:	80 95       	com	r24
 220:	88 bb       	out	0x18, r24	; 24
 222:	6e 01       	movw	r12, r28
 224:	22 e0       	ldi	r18, 0x02	; 2
 226:	e2 2e       	mov	r14, r18
 228:	f1 2c       	mov	r15, r1
 22a:	80 ed       	ldi	r24, 0xD0	; 208
 22c:	97 e0       	ldi	r25, 0x07	; 7
 22e:	f4 01       	movw	r30, r8
 230:	31 97       	sbiw	r30, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <main+0x158>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 234:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 236:	d9 f7       	brne	.-10     	; 0x22e <main+0x156>
 238:	6f cf       	rjmp	.-290    	; 0x118 <main+0x40>
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	ba cf       	rjmp	.-140    	; 0x1b2 <main+0xda>

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
