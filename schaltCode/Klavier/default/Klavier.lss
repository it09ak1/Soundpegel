
Klavier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000033  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001b0  00000000  00000000  0000028b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000119  00000000  00000000  0000043b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002c4  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000818  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000010d  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000ee  00000000  00000000  00000965  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000a53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 44 00 	call	0x88	; 0x88 <main>
  64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <InitADC>:


void InitADC()
{
	//PORTA = 0;
	PORTA = 0;
  6c:	1b ba       	out	0x1b, r1	; 27
	// ADC1 und ADC 0 (diese haben wir jetzt genommen)
	//ADMUX |= (1<<REFS0) | (1<<ADLAR) | (1<<MUX3) | (1<<MUX1) | (1<<MUX0);
	// 10x Verstaerkung
	//ADMUX |= (1<<REFS0) | (1<<MUX3) | (1<<MUX0);
	// ohne Verstaerkung
	ADMUX = (1<<REFS0);
  6e:	80 e4       	ldi	r24, 0x40	; 64
  70:	87 b9       	out	0x07, r24	; 7
	// ADC3 und ADC 2
	//ADMUX |= (1<<REFS0) | (1<<ADLAR) | (1<<MUX3) | (1<<MUX2) | (1<<MUX1) | (1<<MUX10);
	ADCSRA = (1 << ADEN) | (1 << ADPS1) | (1 << ADPS0) | ( 0 << ADPS2);
  72:	83 e8       	ldi	r24, 0x83	; 131
  74:	86 b9       	out	0x06, r24	; 6
}
  76:	08 95       	ret

00000078 <ReadADC>:

uint16_t ReadADC()
{
	ADCSRA |= (1 << ADSC);
  78:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1 << ADIF)));
  7a:	34 9b       	sbis	0x06, 4	; 6
  7c:	fe cf       	rjmp	.-4      	; 0x7a <ReadADC+0x2>

	ADCSRA |= (1 << ADIF);
  7e:	34 9a       	sbi	0x06, 4	; 6

	return(ADC);
  80:	24 b1       	in	r18, 0x04	; 4
  82:	35 b1       	in	r19, 0x05	; 5
}
  84:	c9 01       	movw	r24, r18
  86:	08 95       	ret

00000088 <main>:

int main(void)
{
  88:	cf 92       	push	r12
  8a:	df 92       	push	r13
  8c:	ef 92       	push	r14
  8e:	ff 92       	push	r15
  90:	1f 93       	push	r17
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
	//uint8_t ledOut = 0b00000000;
	DDRB = 0xff;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x00;
  9a:	11 ba       	out	0x11, r1	; 17
	DDRA = 0x00;
  9c:	1a ba       	out	0x1a, r1	; 26


void InitADC()
{
	//PORTA = 0;
	PORTA = 0;
  9e:	1b ba       	out	0x1b, r1	; 27
	// ADC1 und ADC 0 (diese haben wir jetzt genommen)
	//ADMUX |= (1<<REFS0) | (1<<ADLAR) | (1<<MUX3) | (1<<MUX1) | (1<<MUX0);
	// 10x Verstaerkung
	//ADMUX |= (1<<REFS0) | (1<<MUX3) | (1<<MUX0);
	// ohne Verstaerkung
	ADMUX = (1<<REFS0);
  a0:	90 e4       	ldi	r25, 0x40	; 64
  a2:	97 b9       	out	0x07, r25	; 7
	// ADC3 und ADC 2
	//ADMUX |= (1<<REFS0) | (1<<ADLAR) | (1<<MUX3) | (1<<MUX2) | (1<<MUX1) | (1<<MUX10);
	ADCSRA = (1 << ADEN) | (1 << ADPS1) | (1 << ADPS0) | ( 0 << ADPS2);
  a4:	93 e8       	ldi	r25, 0x83	; 131
  a6:	96 b9       	out	0x06, r25	; 6
	DDRB = 0xff;
	DDRD = 0x00;
	DDRA = 0x00;

	InitADC();
	PORTB = (uint8_t)(~(0b00000000));
  a8:	88 bb       	out	0x18, r24	; 24
  aa:	10 e0       	ldi	r17, 0x00	; 0
  ac:	c0 e0       	ldi	r28, 0x00	; 0
  ae:	d0 e0       	ldi	r29, 0x00	; 0
  b0:	ee 24       	eor	r14, r14
  b2:	ff 24       	eor	r15, r15
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b4:	8a e2       	ldi	r24, 0x2A	; 42
  b6:	c8 2e       	mov	r12, r24
  b8:	d1 2c       	mov	r13, r1
	int maxValue = 0;
	uint8_t maxVumeter = 0b00000000;

	while(1)
	{
		value = ReadADC();
  ba:	0e 94 3c 00 	call	0x78	; 0x78 <ReadADC>
  be:	9c 01       	movw	r18, r24
		value = value - 820;
  c0:	24 53       	subi	r18, 0x34	; 52
  c2:	33 40       	sbci	r19, 0x03	; 3
		value = abs(value);
  c4:	37 ff       	sbrs	r19, 7
  c6:	03 c0       	rjmp	.+6      	; 0xce <main+0x46>
  c8:	30 95       	com	r19
  ca:	21 95       	neg	r18
  cc:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		if (value > 100) {
			vumeter |= 0b10000000;
		}*/
		
		if (PIND == 0b11111110)
  ce:	80 b3       	in	r24, 0x10	; 16
  d0:	8e 3f       	cpi	r24, 0xFE	; 254
  d2:	19 f4       	brne	.+6      	; 0xda <main+0x52>
		{
			PORTB = PIND;
  d4:	80 b3       	in	r24, 0x10	; 16
  d6:	88 bb       	out	0x18, r24	; 24
  d8:	16 c0       	rjmp	.+44     	; 0x106 <main+0x7e>
			programm = 1;
		}
		else if (PIND == 0b11111101)
  da:	80 b3       	in	r24, 0x10	; 16
  dc:	8d 3f       	cpi	r24, 0xFD	; 253
  de:	29 f4       	brne	.+10     	; 0xea <main+0x62>
		{
			PORTB = PIND;
  e0:	80 b3       	in	r24, 0x10	; 16
  e2:	88 bb       	out	0x18, r24	; 24
  e4:	c2 e0       	ldi	r28, 0x02	; 2
  e6:	d0 e0       	ldi	r29, 0x00	; 0
  e8:	41 c0       	rjmp	.+130    	; 0x16c <main+0xe4>
			programm = 2;
		}
		else if (PIND == 0b01111111)
  ea:	80 b3       	in	r24, 0x10	; 16
  ec:	8f 37       	cpi	r24, 0x7F	; 127
  ee:	41 f4       	brne	.+16     	; 0x100 <main+0x78>
		{
			// loeschen der Werte	
			PORTB = PIND;
  f0:	80 b3       	in	r24, 0x10	; 16
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	10 e0       	ldi	r17, 0x00	; 0
  f6:	c0 e0       	ldi	r28, 0x00	; 0
  f8:	d0 e0       	ldi	r29, 0x00	; 0
  fa:	ee 24       	eor	r14, r14
  fc:	ff 24       	eor	r15, r15
  fe:	36 c0       	rjmp	.+108    	; 0x16c <main+0xe4>
			maxVumeter = 0b00000000;
			maxValue = 0;
			programm = 0;
		}

		if (programm == 1)
 100:	c1 30       	cpi	r28, 0x01	; 1
 102:	d1 05       	cpc	r29, r1
 104:	99 f5       	brne	.+102    	; 0x16c <main+0xe4>
		{
			// home work
			// eifach reinpusten und sehen wie hoch es steigt
			if (value > 200) {
 106:	29 3c       	cpi	r18, 0xC9	; 201
 108:	31 05       	cpc	r19, r1
 10a:	0c f4       	brge	.+2      	; 0x10e <main+0x86>
 10c:	67 c0       	rjmp	.+206    	; 0x1dc <main+0x154>
					vumeter |= 0b00000001;
				}
				if (value > 275) {
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	24 31       	cpi	r18, 0x14	; 20
 112:	38 07       	cpc	r19, r24
 114:	14 f4       	brge	.+4      	; 0x11a <main+0x92>
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	24 c0       	rjmp	.+72     	; 0x162 <main+0xda>
					vumeter |= 0b00000010;
				}
				if (value > 305) {
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	22 33       	cpi	r18, 0x32	; 50
 11e:	38 07       	cpc	r19, r24
 120:	14 f4       	brge	.+4      	; 0x126 <main+0x9e>
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	1e c0       	rjmp	.+60     	; 0x162 <main+0xda>
					vumeter |= 0b00000100;
				}
				if (value > 335) {
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	20 35       	cpi	r18, 0x50	; 80
 12a:	38 07       	cpc	r19, r24
 12c:	14 f4       	brge	.+4      	; 0x132 <main+0xaa>
 12e:	87 e0       	ldi	r24, 0x07	; 7
 130:	18 c0       	rjmp	.+48     	; 0x162 <main+0xda>
					vumeter |= 0b00001000;
				}
				if (value > 365) {
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	2e 36       	cpi	r18, 0x6E	; 110
 136:	38 07       	cpc	r19, r24
 138:	14 f4       	brge	.+4      	; 0x13e <main+0xb6>
 13a:	8f e0       	ldi	r24, 0x0F	; 15
 13c:	12 c0       	rjmp	.+36     	; 0x162 <main+0xda>
					vumeter |= 0b00010000;
				}
				if (value > 395) {
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	2c 38       	cpi	r18, 0x8C	; 140
 142:	38 07       	cpc	r19, r24
 144:	14 f4       	brge	.+4      	; 0x14a <main+0xc2>
 146:	8f e1       	ldi	r24, 0x1F	; 31
 148:	0c c0       	rjmp	.+24     	; 0x162 <main+0xda>
					vumeter |= 0b00100000;
				}
				if (value > 425) {
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	2a 3a       	cpi	r18, 0xAA	; 170
 14e:	38 07       	cpc	r19, r24
 150:	14 f4       	brge	.+4      	; 0x156 <main+0xce>
 152:	8f e3       	ldi	r24, 0x3F	; 63
 154:	06 c0       	rjmp	.+12     	; 0x162 <main+0xda>
					vumeter |= 0b01000000;
				}
				if (value > 555) {
 156:	2c 52       	subi	r18, 0x2C	; 44
 158:	32 40       	sbci	r19, 0x02	; 2
 15a:	14 f0       	brlt	.+4      	; 0x160 <main+0xd8>
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	01 c0       	rjmp	.+2      	; 0x162 <main+0xda>
 160:	8f e7       	ldi	r24, 0x7F	; 127
			//value = ReadADC();
			//value -=850;
			//value = abs(value);
			//PORTB = (uint8_t)(~(value));
			//PORTB = (uint8_t)(~(ReadADC()));
			PORTB = (uint8_t)(~(vumeter));
 162:	80 95       	com	r24
 164:	88 bb       	out	0x18, r24	; 24
 166:	c1 e0       	ldi	r28, 0x01	; 1
 168:	d0 e0       	ldi	r29, 0x00	; 0
 16a:	30 c0       	rjmp	.+96     	; 0x1cc <main+0x144>
		}
		else if (programm == 2)
 16c:	c2 30       	cpi	r28, 0x02	; 2
 16e:	d1 05       	cpc	r29, r1
 170:	69 f5       	brne	.+90     	; 0x1cc <main+0x144>
		{
			// maximalen pust wert speichern
			// wenn maximal Pust wert groesser als der letzte ist
			if (value > maxValue)
 172:	e2 16       	cp	r14, r18
 174:	f3 06       	cpc	r15, r19
 176:	3c f5       	brge	.+78     	; 0x1c6 <main+0x13e>
				}
				if (value > 200) {
					vumeter |= 0b10000000;
				}*/

				if (value > 200) {
 178:	29 3c       	cpi	r18, 0xC9	; 201
 17a:	31 05       	cpc	r19, r1
 17c:	1c f1       	brlt	.+70     	; 0x1c4 <main+0x13c>
					//vumeter |= 0b00000001;
					maxVumeter |= 0b00000001;
 17e:	11 60       	ori	r17, 0x01	; 1
				}
				if (value > 215) {
 180:	28 3d       	cpi	r18, 0xD8	; 216
 182:	31 05       	cpc	r19, r1
 184:	fc f0       	brlt	.+62     	; 0x1c4 <main+0x13c>
					//vumeter |= 0b00000010;
					maxVumeter |= 0b00000010;
 186:	12 60       	ori	r17, 0x02	; 2
				}
				if (value > 355) {
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	24 36       	cpi	r18, 0x64	; 100
 18c:	38 07       	cpc	r19, r24
 18e:	d4 f0       	brlt	.+52     	; 0x1c4 <main+0x13c>
					//vumeter |= 0b00000100;
					maxVumeter |= 0b00000100;
 190:	14 60       	ori	r17, 0x04	; 4
				}
				if (value > 425) {
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	2a 3a       	cpi	r18, 0xAA	; 170
 196:	38 07       	cpc	r19, r24
 198:	ac f0       	brlt	.+42     	; 0x1c4 <main+0x13c>
					//vumeter |= 0b00001000;
					maxVumeter |= 0b00001000;
 19a:	18 60       	ori	r17, 0x08	; 8
				}
				if (value > 565) {
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	26 33       	cpi	r18, 0x36	; 54
 1a0:	38 07       	cpc	r19, r24
 1a2:	84 f0       	brlt	.+32     	; 0x1c4 <main+0x13c>
					//vumeter |= 0b00010000;
					maxVumeter |= 0b00010000;
 1a4:	10 61       	ori	r17, 0x10	; 16
				}
				if (value > 665) {
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	2a 39       	cpi	r18, 0x9A	; 154
 1aa:	38 07       	cpc	r19, r24
 1ac:	5c f0       	brlt	.+22     	; 0x1c4 <main+0x13c>
					//vumeter |= 0b00100000;
					maxVumeter |= 0b00100000;
 1ae:	10 62       	ori	r17, 0x20	; 32
				}
				if (value > 765) {
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	2e 3f       	cpi	r18, 0xFE	; 254
 1b4:	38 07       	cpc	r19, r24
 1b6:	34 f0       	brlt	.+12     	; 0x1c4 <main+0x13c>
					//vumeter |= 0b01000000;
					maxVumeter |= 0b01000000;
 1b8:	10 64       	ori	r17, 0x40	; 64
				}
				if (value > 845) {
 1ba:	83 e0       	ldi	r24, 0x03	; 3
 1bc:	2e 34       	cpi	r18, 0x4E	; 78
 1be:	38 07       	cpc	r19, r24
 1c0:	0c f0       	brlt	.+2      	; 0x1c4 <main+0x13c>
					//vumeter |= 0b10000000;
					maxVumeter |= 0b10000000;
 1c2:	10 68       	ori	r17, 0x80	; 128
 1c4:	79 01       	movw	r14, r18
				}

				maxValue = value;
			}

			PORTB = (uint8_t)(~(maxVumeter));
 1c6:	81 2f       	mov	r24, r17
 1c8:	80 95       	com	r24
 1ca:	88 bb       	out	0x18, r24	; 24
 1cc:	80 ed       	ldi	r24, 0xD0	; 208
 1ce:	97 e0       	ldi	r25, 0x07	; 7
 1d0:	f6 01       	movw	r30, r12
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <main+0x14a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d8:	d9 f7       	brne	.-10     	; 0x1d0 <main+0x148>
 1da:	6f cf       	rjmp	.-290    	; 0xba <main+0x32>
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	c1 cf       	rjmp	.-126    	; 0x162 <main+0xda>

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
