
Klavier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000412  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  000004a6  2**0
                  ALLOC
  2 .eeprom       00000003  00810000  00810000  000004a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000020  00000000  00000000  000004a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000a9  00000000  00000000  000004c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000383  00000000  00000000  00000572  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000188  00000000  00000000  000008f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000045d  00000000  00000000  00000a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000edc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000175  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002cb  00000000  00000000  000010a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 65 00 	call	0xca	; 0xca <main>
  74:	0c 94 07 02 	jmp	0x40e	; 0x40e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <InitADC>:
uint8_t eeMaxVumeter EEMEM;
uint8_t eeVumeterCounter EEMEM;

void InitADC()
{
	PORTA = 0;
  7c:	1b ba       	out	0x1b, r1	; 27
	// MUX0-4 setzen (Datenhandbuch Seite 219)
	// 10x Verstaerkung
	//ADMUX |= (1<<REFS0) | (1<<MUX3) | (1<<MUX0);
	// ohne Verstaerkung
	ADMUX = (1<<REFS0) | (1<<REFS1);	// interne Referenz von 2,56V nutzen
  7e:	80 ec       	ldi	r24, 0xC0	; 192
  80:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1 << ADEN) | (1 << ADPS1) | (1 << ADPS0) | ( 0 << ADPS2);
  82:	83 e8       	ldi	r24, 0x83	; 131
  84:	86 b9       	out	0x06, r24	; 6
}
  86:	08 95       	ret

00000088 <ReadADC>:

uint16_t ReadADC()
{
	ADCSRA |= (1 << ADSC); 				// Wandlung auslösen
  88:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1 << ADIF)));	// warten auf Abschluss Wandlung
  8a:	34 9b       	sbis	0x06, 4	; 6
  8c:	fe cf       	rjmp	.-4      	; 0x8a <ReadADC+0x2>

	ADCSRA |= (1 << ADIF);				// Bit wird auf eins gesetzt, wenn Wandlung
  8e:	34 9a       	sbi	0x06, 4	; 6
										// abgeschlossen und der neue Wert in das
										// Datenregister ADC geschrieben wurde
										// (ist eine zusaetzliche Zeile, sollte
										// auch automatisch gehen)
	return(ADC);
  90:	24 b1       	in	r18, 0x04	; 4
  92:	35 b1       	in	r19, 0x05	; 5
}
  94:	c9 01       	movw	r24, r18
  96:	08 95       	ret

00000098 <MittelwertADC>:

uint16_t MittelwertADC()
{
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	c0 e0       	ldi	r28, 0x00	; 0
  a2:	d0 e0       	ldi	r29, 0x00	; 0
	uint16_t sum;
	uint16_t mittelwert;

	for (int i=0; i<=29;i++)
	{
		uint16_t singleValue = ReadADC();
  a4:	0e 94 44 00 	call	0x88	; 0x88 <ReadADC>

		sum += singleValue;
  a8:	08 0f       	add	r16, r24
  aa:	19 1f       	adc	r17, r25
uint16_t MittelwertADC()
{
	uint16_t sum;
	uint16_t mittelwert;

	for (int i=0; i<=29;i++)
  ac:	21 96       	adiw	r28, 0x01	; 1
  ae:	ce 31       	cpi	r28, 0x1E	; 30
  b0:	d1 05       	cpc	r29, r1
  b2:	c1 f7       	brne	.-16     	; 0xa4 <MittelwertADC+0xc>
  b4:	c8 01       	movw	r24, r16
  b6:	6e e1       	ldi	r22, 0x1E	; 30
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	0e 94 de 01 	call	0x3bc	; 0x3bc <__udivmodhi4>
  be:	cb 01       	movw	r24, r22
	}

	mittelwert = sum/30;

	return mittelwert;
}
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	1f 91       	pop	r17
  c6:	0f 91       	pop	r16
  c8:	08 95       	ret

000000ca <main>:

int main(void)
{
  ca:	7f 92       	push	r7
  cc:	8f 92       	push	r8
  ce:	9f 92       	push	r9
  d0:	af 92       	push	r10
  d2:	bf 92       	push	r11
  d4:	cf 92       	push	r12
  d6:	df 92       	push	r13
  d8:	ef 92       	push	r14
  da:	ff 92       	push	r15
  dc:	0f 93       	push	r16
  de:	1f 93       	push	r17
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
	// 
	DDRB = 0xff;	// PORTB als Ausgang setzten
  e4:	1f ef       	ldi	r17, 0xFF	; 255
  e6:	17 bb       	out	0x17, r17	; 23
	DDRD = 0x00;	// PORTD auf Eingang setzten
  e8:	11 ba       	out	0x11, r1	; 17
	DDRA = 0x00;	// PORTA auf Eingang setzten
  ea:	1a ba       	out	0x1a, r1	; 26

	programm = eeprom_read_byte(&eeProgramm);				// Programm aus EEPROM lesen
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__eerd_byte_m16>
  f4:	80 93 60 00 	sts	0x0060, r24
	maxVumeter = eeprom_read_byte(&eeMaxVumeter);			// Maximalen Wert aus EEPROM lesen
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__eerd_byte_m16>
 100:	80 93 61 00 	sts	0x0061, r24
	vumeterCounter = eeprom_read_byte(&eeVumeterCounter);	// Zaehlwert aus EEPROM lesen
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__eerd_byte_m16>
 10c:	80 93 62 00 	sts	0x0062, r24
uint8_t eeMaxVumeter EEMEM;
uint8_t eeVumeterCounter EEMEM;

void InitADC()
{
	PORTA = 0;
 110:	1b ba       	out	0x1b, r1	; 27
	// MUX0-4 setzen (Datenhandbuch Seite 219)
	// 10x Verstaerkung
	//ADMUX |= (1<<REFS0) | (1<<MUX3) | (1<<MUX0);
	// ohne Verstaerkung
	ADMUX = (1<<REFS0) | (1<<REFS1);	// interne Referenz von 2,56V nutzen
 112:	80 ec       	ldi	r24, 0xC0	; 192
 114:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1 << ADEN) | (1 << ADPS1) | (1 << ADPS0) | ( 0 << ADPS2);
 116:	83 e8       	ldi	r24, 0x83	; 131
 118:	86 b9       	out	0x06, r24	; 6
	programm = eeprom_read_byte(&eeProgramm);				// Programm aus EEPROM lesen
	maxVumeter = eeprom_read_byte(&eeMaxVumeter);			// Maximalen Wert aus EEPROM lesen
	vumeterCounter = eeprom_read_byte(&eeVumeterCounter);	// Zaehlwert aus EEPROM lesen

	InitADC();
	PORTB = (uint8_t)(~(0b00000000));
 11a:	18 bb       	out	0x18, r17	; 24
	uint16_t abzugswert = 0;
	
	// gehe in die Funktion MittelwertADC() um den Nullpunkt zu ermitteln
	// damit LEDs erst auflauchten wenn eine Scwingung vom Nutzer
	// erzeugt wird
	abzugswert = MittelwertADC();
 11c:	0e 94 4c 00 	call	0x98	; 0x98 <MittelwertADC>
 120:	6c 01       	movw	r12, r24
 122:	00 e0       	ldi	r16, 0x00	; 0
 124:	10 e0       	ldi	r17, 0x00	; 0
			_delay_ms(200);
		}
		else if (PIND == 0b11111011)
		{
			PORTB = PIND;
			programm = 3;
 126:	e3 e0       	ldi	r30, 0x03	; 3
 128:	9e 2e       	mov	r9, r30
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 12a:	7a e2       	ldi	r23, 0x2A	; 42
 12c:	e7 2e       	mov	r14, r23
 12e:	f1 2c       	mov	r15, r1
			_delay_ms(200);
		}
		else if (PIND == 0b11111101)
		{
			PORTB = PIND;
			programm = 2;
 130:	62 e0       	ldi	r22, 0x02	; 2
 132:	86 2e       	mov	r8, r22
		
		// programm Auswahl
		if (PIND == 0b11111110)
		{
			PORTB = PIND;
			programm = 1;
 134:	77 24       	eor	r7, r7
 136:	73 94       	inc	r7
 138:	50 ef       	ldi	r21, 0xF0	; 240
 13a:	a5 2e       	mov	r10, r21
 13c:	50 e2       	ldi	r21, 0x20	; 32
 13e:	b5 2e       	mov	r11, r21
	// erzeugt wird
	abzugswert = MittelwertADC();

	while(1)
	{
		value = ReadADC();
 140:	0e 94 44 00 	call	0x88	; 0x88 <ReadADC>
		value = value - abzugswert;
		value = abs(value) * 5;
 144:	9c 01       	movw	r18, r24
 146:	2c 19       	sub	r18, r12
 148:	3d 09       	sbc	r19, r13
 14a:	37 ff       	sbrs	r19, 7
 14c:	03 c0       	rjmp	.+6      	; 0x154 <main+0x8a>
 14e:	30 95       	com	r19
 150:	21 95       	neg	r18
 152:	3f 4f       	sbci	r19, 0xFF	; 255
 154:	c9 01       	movw	r24, r18
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	82 0f       	add	r24, r18
 160:	93 1f       	adc	r25, r19
 162:	ec 01       	movw	r28, r24
		uint8_t vumeter = 0b00000000;
		
		// programm Auswahl
		if (PIND == 0b11111110)
 164:	80 b3       	in	r24, 0x10	; 16
 166:	8e 3f       	cpi	r24, 0xFE	; 254
 168:	91 f4       	brne	.+36     	; 0x18e <main+0xc4>
		{
			PORTB = PIND;
 16a:	80 b3       	in	r24, 0x10	; 16
 16c:	88 bb       	out	0x18, r24	; 24
			programm = 1;
 16e:	70 92 60 00 	sts	0x0060, r7
			eeprom_write_byte(&eeProgramm, programm);	// im EEPROM sichern
 172:	60 91 60 00 	lds	r22, 0x0060
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__eewr_byte_m16>
 17e:	80 ed       	ldi	r24, 0xD0	; 208
 180:	97 e0       	ldi	r25, 0x07	; 7
 182:	f7 01       	movw	r30, r14
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0xba>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 188:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18a:	d9 f7       	brne	.-10     	; 0x182 <main+0xb8>
 18c:	38 c0       	rjmp	.+112    	; 0x1fe <main+0x134>
			_delay_ms(200);
		}
		else if (PIND == 0b11111101)
 18e:	80 b3       	in	r24, 0x10	; 16
 190:	8d 3f       	cpi	r24, 0xFD	; 253
 192:	91 f4       	brne	.+36     	; 0x1b8 <main+0xee>
		{
			PORTB = PIND;
 194:	80 b3       	in	r24, 0x10	; 16
 196:	88 bb       	out	0x18, r24	; 24
			programm = 2;
 198:	80 92 60 00 	sts	0x0060, r8
			eeprom_write_byte(&eeProgramm, programm);	// im EEPROM sichern
 19c:	60 91 60 00 	lds	r22, 0x0060
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__eewr_byte_m16>
 1a8:	80 ed       	ldi	r24, 0xD0	; 208
 1aa:	97 e0       	ldi	r25, 0x07	; 7
 1ac:	f7 01       	movw	r30, r14
 1ae:	31 97       	sbiw	r30, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0xe4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b4:	d9 f7       	brne	.-10     	; 0x1ac <main+0xe2>
 1b6:	23 c0       	rjmp	.+70     	; 0x1fe <main+0x134>
			_delay_ms(200);
		}
		else if (PIND == 0b11111011)
 1b8:	80 b3       	in	r24, 0x10	; 16
 1ba:	8b 3f       	cpi	r24, 0xFB	; 251
 1bc:	91 f4       	brne	.+36     	; 0x1e2 <main+0x118>
		{
			PORTB = PIND;
 1be:	80 b3       	in	r24, 0x10	; 16
 1c0:	88 bb       	out	0x18, r24	; 24
			programm = 3;
 1c2:	90 92 60 00 	sts	0x0060, r9
			eeprom_write_byte(&eeProgramm, programm);	// im EEPROM sichern
 1c6:	60 91 60 00 	lds	r22, 0x0060
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__eewr_byte_m16>
 1d2:	80 ed       	ldi	r24, 0xD0	; 208
 1d4:	97 e0       	ldi	r25, 0x07	; 7
 1d6:	f7 01       	movw	r30, r14
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <main+0x10e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1dc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1de:	d9 f7       	brne	.-10     	; 0x1d6 <main+0x10c>
 1e0:	0e c0       	rjmp	.+28     	; 0x1fe <main+0x134>
			_delay_ms(200);
		}
		else if (PIND == 0b01111111)
 1e2:	80 b3       	in	r24, 0x10	; 16
 1e4:	8f 37       	cpi	r24, 0x7F	; 127
 1e6:	59 f4       	brne	.+22     	; 0x1fe <main+0x134>
		{
			// loeschen der Werte	
			PORTB = PIND;
 1e8:	80 b3       	in	r24, 0x10	; 16
 1ea:	88 bb       	out	0x18, r24	; 24
			maxVumeter = 0b00000000;
 1ec:	10 92 61 00 	sts	0x0061, r1
			maxValue = 0;
			vumeterCounter = 0;
 1f0:	10 92 62 00 	sts	0x0062, r1
			abzugswert = MittelwertADC();
 1f4:	0e 94 4c 00 	call	0x98	; 0x98 <MittelwertADC>
 1f8:	6c 01       	movw	r12, r24
 1fa:	00 e0       	ldi	r16, 0x00	; 0
 1fc:	10 e0       	ldi	r17, 0x00	; 0
		}

		if (programm == 1)
 1fe:	80 91 60 00 	lds	r24, 0x0060
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	69 f5       	brne	.+90     	; 0x260 <main+0x196>
		{
			
			if (value > 50) {
 206:	c3 33       	cpi	r28, 0x33	; 51
 208:	d1 05       	cpc	r29, r1
 20a:	08 f4       	brcc	.+2      	; 0x20e <main+0x144>
 20c:	d5 c0       	rjmp	.+426    	; 0x3b8 <main+0x2ee>
				vumeter |= 0b00000001;
			}
			if (value > 228) {
 20e:	c5 3e       	cpi	r28, 0xE5	; 229
 210:	d1 05       	cpc	r29, r1
 212:	08 f4       	brcc	.+2      	; 0x216 <main+0x14c>
 214:	cb c0       	rjmp	.+406    	; 0x3ac <main+0x2e2>
				vumeter |= 0b00000010;
			}
			if (value > 406) {
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	c7 39       	cpi	r28, 0x97	; 151
 21a:	d8 07       	cpc	r29, r24
 21c:	10 f4       	brcc	.+4      	; 0x222 <main+0x158>
 21e:	83 e0       	ldi	r24, 0x03	; 3
 220:	c5 c0       	rjmp	.+394    	; 0x3ac <main+0x2e2>
				vumeter |= 0b00000100;
			}
			if (value > 584) {
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	c9 34       	cpi	r28, 0x49	; 73
 226:	d8 07       	cpc	r29, r24
 228:	10 f4       	brcc	.+4      	; 0x22e <main+0x164>
 22a:	87 e0       	ldi	r24, 0x07	; 7
 22c:	bf c0       	rjmp	.+382    	; 0x3ac <main+0x2e2>
				vumeter |= 0b00001000;
			}
			if (value > 762) {
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	cb 3f       	cpi	r28, 0xFB	; 251
 232:	d8 07       	cpc	r29, r24
 234:	10 f4       	brcc	.+4      	; 0x23a <main+0x170>
 236:	8f e0       	ldi	r24, 0x0F	; 15
 238:	b9 c0       	rjmp	.+370    	; 0x3ac <main+0x2e2>
				vumeter |= 0b00010000;
			}
			if (value > 940) {
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	cd 3a       	cpi	r28, 0xAD	; 173
 23e:	d8 07       	cpc	r29, r24
 240:	10 f4       	brcc	.+4      	; 0x246 <main+0x17c>
 242:	8f e1       	ldi	r24, 0x1F	; 31
 244:	b3 c0       	rjmp	.+358    	; 0x3ac <main+0x2e2>
				vumeter |= 0b00100000;
			}
			if (value > 1118) {
 246:	84 e0       	ldi	r24, 0x04	; 4
 248:	cf 35       	cpi	r28, 0x5F	; 95
 24a:	d8 07       	cpc	r29, r24
 24c:	10 f4       	brcc	.+4      	; 0x252 <main+0x188>
 24e:	8f e3       	ldi	r24, 0x3F	; 63
 250:	ad c0       	rjmp	.+346    	; 0x3ac <main+0x2e2>
				vumeter |= 0b01000000;
			}
			if (value > 1300) {
 252:	c5 51       	subi	r28, 0x15	; 21
 254:	d5 40       	sbci	r29, 0x05	; 5
 256:	10 f0       	brcs	.+4      	; 0x25c <main+0x192>
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	a8 c0       	rjmp	.+336    	; 0x3ac <main+0x2e2>
 25c:	8f e7       	ldi	r24, 0x7F	; 127
 25e:	a6 c0       	rjmp	.+332    	; 0x3ac <main+0x2e2>
				vumeter |= 0b10000000;
			}
		
			PORTB = (uint8_t)(~(vumeter));
		}
		else if (programm == 2)
 260:	80 91 60 00 	lds	r24, 0x0060
 264:	82 30       	cpi	r24, 0x02	; 2
 266:	09 f0       	breq	.+2      	; 0x26a <main+0x1a0>
 268:	82 c0       	rjmp	.+260    	; 0x36e <main+0x2a4>
		{
			// maximalen pust wert speichern
			// wenn maximal Pust wert groesser als der letzte ist
			if (value > maxValue)
 26a:	0c 17       	cp	r16, r28
 26c:	1d 07       	cpc	r17, r29
 26e:	08 f0       	brcs	.+2      	; 0x272 <main+0x1a8>
 270:	7b c0       	rjmp	.+246    	; 0x368 <main+0x29e>
			{
				if (value > 50) {
 272:	c3 33       	cpi	r28, 0x33	; 51
 274:	d1 05       	cpc	r29, r1
 276:	08 f4       	brcc	.+2      	; 0x27a <main+0x1b0>
 278:	76 c0       	rjmp	.+236    	; 0x366 <main+0x29c>
					maxVumeter |= 0b00000001;
 27a:	80 91 61 00 	lds	r24, 0x0061
 27e:	81 60       	ori	r24, 0x01	; 1
 280:	80 93 61 00 	sts	0x0061, r24
					eeprom_write_byte(&eeMaxVumeter, maxVumeter);	// im EEPROM sichern
 284:	60 91 61 00 	lds	r22, 0x0061
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__eewr_byte_m16>
				}
				if (value > 228) {
 290:	c5 3e       	cpi	r28, 0xE5	; 229
 292:	d1 05       	cpc	r29, r1
 294:	08 f4       	brcc	.+2      	; 0x298 <main+0x1ce>
 296:	67 c0       	rjmp	.+206    	; 0x366 <main+0x29c>
					maxVumeter |= 0b00000010;
 298:	80 91 61 00 	lds	r24, 0x0061
 29c:	82 60       	ori	r24, 0x02	; 2
 29e:	80 93 61 00 	sts	0x0061, r24
					eeprom_write_byte(&eeMaxVumeter, maxVumeter);	// im EEPROM sichern
 2a2:	60 91 61 00 	lds	r22, 0x0061
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__eewr_byte_m16>
				}
				if (value > 406) {
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	c7 39       	cpi	r28, 0x97	; 151
 2b2:	d8 07       	cpc	r29, r24
 2b4:	08 f4       	brcc	.+2      	; 0x2b8 <main+0x1ee>
 2b6:	57 c0       	rjmp	.+174    	; 0x366 <main+0x29c>
					maxVumeter |= 0b00000100;
 2b8:	80 91 61 00 	lds	r24, 0x0061
 2bc:	84 60       	ori	r24, 0x04	; 4
 2be:	80 93 61 00 	sts	0x0061, r24
					eeprom_write_byte(&eeMaxVumeter, maxVumeter);	// im EEPROM sichern
 2c2:	60 91 61 00 	lds	r22, 0x0061
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__eewr_byte_m16>
				}
				if (value > 584) {
 2ce:	82 e0       	ldi	r24, 0x02	; 2
 2d0:	c9 34       	cpi	r28, 0x49	; 73
 2d2:	d8 07       	cpc	r29, r24
 2d4:	08 f4       	brcc	.+2      	; 0x2d8 <main+0x20e>
 2d6:	47 c0       	rjmp	.+142    	; 0x366 <main+0x29c>
					maxVumeter |= 0b00001000;
 2d8:	80 91 61 00 	lds	r24, 0x0061
 2dc:	88 60       	ori	r24, 0x08	; 8
 2de:	80 93 61 00 	sts	0x0061, r24
					eeprom_write_byte(&eeMaxVumeter, maxVumeter);	// im EEPROM sichern
 2e2:	60 91 61 00 	lds	r22, 0x0061
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__eewr_byte_m16>
				}
				if (value > 762) {
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	cb 3f       	cpi	r28, 0xFB	; 251
 2f2:	d8 07       	cpc	r29, r24
 2f4:	c0 f1       	brcs	.+112    	; 0x366 <main+0x29c>
					maxVumeter |= 0b00010000;
 2f6:	80 91 61 00 	lds	r24, 0x0061
 2fa:	80 61       	ori	r24, 0x10	; 16
 2fc:	80 93 61 00 	sts	0x0061, r24
					eeprom_write_byte(&eeMaxVumeter, maxVumeter);	// im EEPROM sichern
 300:	60 91 61 00 	lds	r22, 0x0061
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__eewr_byte_m16>
				}
				if (value > 940) {
 30c:	83 e0       	ldi	r24, 0x03	; 3
 30e:	cd 3a       	cpi	r28, 0xAD	; 173
 310:	d8 07       	cpc	r29, r24
 312:	48 f1       	brcs	.+82     	; 0x366 <main+0x29c>
					maxVumeter |= 0b00100000;
 314:	80 91 61 00 	lds	r24, 0x0061
 318:	80 62       	ori	r24, 0x20	; 32
 31a:	80 93 61 00 	sts	0x0061, r24
					eeprom_write_byte(&eeMaxVumeter, maxVumeter);	// im EEPROM sichern
 31e:	60 91 61 00 	lds	r22, 0x0061
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__eewr_byte_m16>
				}
				if (value > 1118) {
 32a:	84 e0       	ldi	r24, 0x04	; 4
 32c:	cf 35       	cpi	r28, 0x5F	; 95
 32e:	d8 07       	cpc	r29, r24
 330:	d0 f0       	brcs	.+52     	; 0x366 <main+0x29c>
					maxVumeter |= 0b01000000;
 332:	80 91 61 00 	lds	r24, 0x0061
 336:	80 64       	ori	r24, 0x40	; 64
 338:	80 93 61 00 	sts	0x0061, r24
					eeprom_write_byte(&eeMaxVumeter, maxVumeter);	// im EEPROM sichern
 33c:	60 91 61 00 	lds	r22, 0x0061
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__eewr_byte_m16>
				}
				if (value > 1300) {
 348:	85 e0       	ldi	r24, 0x05	; 5
 34a:	c5 31       	cpi	r28, 0x15	; 21
 34c:	d8 07       	cpc	r29, r24
 34e:	58 f0       	brcs	.+22     	; 0x366 <main+0x29c>
					maxVumeter |= 0b10000000;
 350:	80 91 61 00 	lds	r24, 0x0061
 354:	80 68       	ori	r24, 0x80	; 128
 356:	80 93 61 00 	sts	0x0061, r24
					eeprom_write_byte(&eeMaxVumeter, maxVumeter);	// im EEPROM sichern
 35a:	60 91 61 00 	lds	r22, 0x0061
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__eewr_byte_m16>
 366:	8e 01       	movw	r16, r28
				}

				maxValue = value;
			}
			
			PORTB = (uint8_t)(~(maxVumeter));
 368:	80 91 61 00 	lds	r24, 0x0061
 36c:	1f c0       	rjmp	.+62     	; 0x3ac <main+0x2e2>

		}
		else if (programm == 3)
 36e:	80 91 60 00 	lds	r24, 0x0060
 372:	83 30       	cpi	r24, 0x03	; 3
 374:	e9 f4       	brne	.+58     	; 0x3b0 <main+0x2e6>
		{
			if (value > 300)
 376:	cd 52       	subi	r28, 0x2D	; 45
 378:	d1 40       	sbci	r29, 0x01	; 1
 37a:	b0 f0       	brcs	.+44     	; 0x3a8 <main+0x2de>
			{
				vumeterCounter++;
 37c:	80 91 62 00 	lds	r24, 0x0062
 380:	8f 5f       	subi	r24, 0xFF	; 255
 382:	80 93 62 00 	sts	0x0062, r24
				eeprom_write_byte(&eeVumeterCounter, vumeterCounter);	// im EEPROM sichern				
 386:	60 91 62 00 	lds	r22, 0x0062
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__eewr_byte_m16>
				PORTB = (uint8_t)(~(vumeterCounter));
 392:	80 91 62 00 	lds	r24, 0x0062
 396:	80 95       	com	r24
 398:	88 bb       	out	0x18, r24	; 24
 39a:	80 ed       	ldi	r24, 0xD0	; 208
 39c:	97 e0       	ldi	r25, 0x07	; 7
 39e:	f7 01       	movw	r30, r14
 3a0:	31 97       	sbiw	r30, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <main+0x2d6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3a6:	d9 f7       	brne	.-10     	; 0x39e <main+0x2d4>
				_delay_ms(200);
			}

			PORTB = (uint8_t)(~(vumeterCounter));
 3a8:	80 91 62 00 	lds	r24, 0x0062
 3ac:	80 95       	com	r24
 3ae:	88 bb       	out	0x18, r24	; 24
 3b0:	c5 01       	movw	r24, r10
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <main+0x2e8>
 3b6:	c4 ce       	rjmp	.-632    	; 0x140 <main+0x76>
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	f8 cf       	rjmp	.-16     	; 0x3ac <main+0x2e2>

000003bc <__udivmodhi4>:
 3bc:	aa 1b       	sub	r26, r26
 3be:	bb 1b       	sub	r27, r27
 3c0:	51 e1       	ldi	r21, 0x11	; 17
 3c2:	07 c0       	rjmp	.+14     	; 0x3d2 <__udivmodhi4_ep>

000003c4 <__udivmodhi4_loop>:
 3c4:	aa 1f       	adc	r26, r26
 3c6:	bb 1f       	adc	r27, r27
 3c8:	a6 17       	cp	r26, r22
 3ca:	b7 07       	cpc	r27, r23
 3cc:	10 f0       	brcs	.+4      	; 0x3d2 <__udivmodhi4_ep>
 3ce:	a6 1b       	sub	r26, r22
 3d0:	b7 0b       	sbc	r27, r23

000003d2 <__udivmodhi4_ep>:
 3d2:	88 1f       	adc	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	5a 95       	dec	r21
 3d8:	a9 f7       	brne	.-22     	; 0x3c4 <__udivmodhi4_loop>
 3da:	80 95       	com	r24
 3dc:	90 95       	com	r25
 3de:	bc 01       	movw	r22, r24
 3e0:	cd 01       	movw	r24, r26
 3e2:	08 95       	ret

000003e4 <__eerd_byte_m16>:
 3e4:	e1 99       	sbic	0x1c, 1	; 28
 3e6:	fe cf       	rjmp	.-4      	; 0x3e4 <__eerd_byte_m16>
 3e8:	9f bb       	out	0x1f, r25	; 31
 3ea:	8e bb       	out	0x1e, r24	; 30
 3ec:	e0 9a       	sbi	0x1c, 0	; 28
 3ee:	99 27       	eor	r25, r25
 3f0:	8d b3       	in	r24, 0x1d	; 29
 3f2:	08 95       	ret

000003f4 <__eewr_byte_m16>:
 3f4:	26 2f       	mov	r18, r22

000003f6 <__eewr_r18_m16>:
 3f6:	e1 99       	sbic	0x1c, 1	; 28
 3f8:	fe cf       	rjmp	.-4      	; 0x3f6 <__eewr_r18_m16>
 3fa:	9f bb       	out	0x1f, r25	; 31
 3fc:	8e bb       	out	0x1e, r24	; 30
 3fe:	2d bb       	out	0x1d, r18	; 29
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	f8 94       	cli
 404:	e2 9a       	sbi	0x1c, 2	; 28
 406:	e1 9a       	sbi	0x1c, 1	; 28
 408:	0f be       	out	0x3f, r0	; 63
 40a:	01 96       	adiw	r24, 0x01	; 1
 40c:	08 95       	ret

0000040e <_exit>:
 40e:	f8 94       	cli

00000410 <__stop_program>:
 410:	ff cf       	rjmp	.-2      	; 0x410 <__stop_program>
