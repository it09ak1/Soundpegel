
Klavier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000033  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000016c  00000000  00000000  000001c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f3  00000000  00000000  0000032f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001df  00000000  00000000  00000422  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f0  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000bb  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000007ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 44 00 	call	0x88	; 0x88 <main>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <InitADC>:
#include <math.h>


void InitADC()
{
	PORTA = 0;
  6c:	1b ba       	out	0x1b, r1	; 27
	// ADC1 und ADC 0 (diese haben wir jetzt genommen)
	//ADMUX |= (1<<REFS0) | (1<<ADLAR) | (1<<MUX3) | (1<<MUX1) | (1<<MUX0);
	// 10x Verstaerkung
	//ADMUX |= (1<<REFS0) | (1<<MUX3) | (1<<MUX0);
	// ohne Verstaerkung
	ADMUX = (1<<REFS0);
  6e:	80 e4       	ldi	r24, 0x40	; 64
  70:	87 b9       	out	0x07, r24	; 7
	// ADC3 und ADC 2
	//ADMUX |= (1<<REFS0) | (1<<ADLAR) | (1<<MUX3) | (1<<MUX2) | (1<<MUX1) | (1<<MUX10);
	ADCSRA = (1 << ADEN) | (1 << ADPS1) | (1 << ADPS0) | ( 0 << ADPS2);
  72:	83 e8       	ldi	r24, 0x83	; 131
  74:	86 b9       	out	0x06, r24	; 6
}
  76:	08 95       	ret

00000078 <ReadADC>:

uint16_t ReadADC()
{
	ADCSRA |= (1 << ADSC);
  78:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1 << ADIF)));
  7a:	34 9b       	sbis	0x06, 4	; 6
  7c:	fe cf       	rjmp	.-4      	; 0x7a <ReadADC+0x2>

	ADCSRA |= (1 << ADIF);
  7e:	34 9a       	sbi	0x06, 4	; 6

	return(ADC);
  80:	24 b1       	in	r18, 0x04	; 4
  82:	35 b1       	in	r19, 0x05	; 5
}
  84:	c9 01       	movw	r24, r18
  86:	08 95       	ret

00000088 <main>:

int main(void)
{
  88:	cf 93       	push	r28
  8a:	df 93       	push	r29
	//uint8_t ledOut = 0b00000000;
	DDRB = 0xff;
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	87 bb       	out	0x17, r24	; 23
	//DDRD = 0x00;
	DDRA = 0x00;
  90:	1a ba       	out	0x1a, r1	; 26
#include <math.h>


void InitADC()
{
	PORTA = 0;
  92:	1b ba       	out	0x1b, r1	; 27
	// ADC1 und ADC 0 (diese haben wir jetzt genommen)
	//ADMUX |= (1<<REFS0) | (1<<ADLAR) | (1<<MUX3) | (1<<MUX1) | (1<<MUX0);
	// 10x Verstaerkung
	//ADMUX |= (1<<REFS0) | (1<<MUX3) | (1<<MUX0);
	// ohne Verstaerkung
	ADMUX = (1<<REFS0);
  94:	80 e4       	ldi	r24, 0x40	; 64
  96:	87 b9       	out	0x07, r24	; 7
	// ADC3 und ADC 2
	//ADMUX |= (1<<REFS0) | (1<<ADLAR) | (1<<MUX3) | (1<<MUX2) | (1<<MUX1) | (1<<MUX10);
	ADCSRA = (1 << ADEN) | (1 << ADPS1) | (1 << ADPS0) | ( 0 << ADPS2);
  98:	83 e8       	ldi	r24, 0x83	; 131
  9a:	86 b9       	out	0x06, r24	; 6
	DDRB = 0xff;
	//DDRD = 0x00;
	DDRA = 0x00;

	InitADC();
	PORTD = 0;
  9c:	12 ba       	out	0x12, r1	; 18
	PORTB = (uint8_t)(~(0b00000001));
  9e:	8e ef       	ldi	r24, 0xFE	; 254
  a0:	88 bb       	out	0x18, r24	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a2:	c0 eb       	ldi	r28, 0xB0	; 176
  a4:	d4 ea       	ldi	r29, 0xA4	; 164
	int value = 0;

	while(1)
	{

		value = ReadADC();
  a6:	0e 94 3c 00 	call	0x78	; 0x78 <ReadADC>
  aa:	9c 01       	movw	r18, r24
		value = value - 820;
  ac:	24 53       	subi	r18, 0x34	; 52
  ae:	33 40       	sbci	r19, 0x03	; 3
		value = abs(value);
  b0:	37 ff       	sbrs	r19, 7
  b2:	03 c0       	rjmp	.+6      	; 0xba <main+0x32>
  b4:	30 95       	com	r19
  b6:	21 95       	neg	r18
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
		uint8_t vumeter = 0b00000000;
		
		if (value > 50) {
  ba:	23 33       	cpi	r18, 0x33	; 51
  bc:	31 05       	cpc	r19, r1
  be:	54 f1       	brlt	.+84     	; 0x114 <main+0x8c>
			vumeter |= 0b00000001;
		}
		if (value > 55) {
  c0:	28 33       	cpi	r18, 0x38	; 56
  c2:	31 05       	cpc	r19, r1
  c4:	14 f4       	brge	.+4      	; 0xca <main+0x42>
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	1f c0       	rjmp	.+62     	; 0x108 <main+0x80>
			vumeter |= 0b00000010;
		}
		if (value > 60) {
  ca:	2d 33       	cpi	r18, 0x3D	; 61
  cc:	31 05       	cpc	r19, r1
  ce:	14 f4       	brge	.+4      	; 0xd4 <main+0x4c>
  d0:	83 e0       	ldi	r24, 0x03	; 3
  d2:	1a c0       	rjmp	.+52     	; 0x108 <main+0x80>
			vumeter |= 0b00000100;
		}
		if (value > 65) {
  d4:	22 34       	cpi	r18, 0x42	; 66
  d6:	31 05       	cpc	r19, r1
  d8:	14 f4       	brge	.+4      	; 0xde <main+0x56>
  da:	87 e0       	ldi	r24, 0x07	; 7
  dc:	15 c0       	rjmp	.+42     	; 0x108 <main+0x80>
			vumeter |= 0b00001000;
		}
		if (value > 70) {
  de:	27 34       	cpi	r18, 0x47	; 71
  e0:	31 05       	cpc	r19, r1
  e2:	14 f4       	brge	.+4      	; 0xe8 <main+0x60>
  e4:	8f e0       	ldi	r24, 0x0F	; 15
  e6:	10 c0       	rjmp	.+32     	; 0x108 <main+0x80>
			vumeter |= 0b00010000;
		}
		if (value > 75) {
  e8:	2c 34       	cpi	r18, 0x4C	; 76
  ea:	31 05       	cpc	r19, r1
  ec:	14 f4       	brge	.+4      	; 0xf2 <main+0x6a>
  ee:	8f e1       	ldi	r24, 0x1F	; 31
  f0:	0b c0       	rjmp	.+22     	; 0x108 <main+0x80>
			vumeter |= 0b00100000;
		}
		if (value > 85) {
  f2:	26 35       	cpi	r18, 0x56	; 86
  f4:	31 05       	cpc	r19, r1
  f6:	14 f4       	brge	.+4      	; 0xfc <main+0x74>
  f8:	8f e3       	ldi	r24, 0x3F	; 63
  fa:	06 c0       	rjmp	.+12     	; 0x108 <main+0x80>
			vumeter |= 0b01000000;
		}
		if (value > 100) {
  fc:	25 36       	cpi	r18, 0x65	; 101
  fe:	31 05       	cpc	r19, r1
 100:	14 f0       	brlt	.+4      	; 0x106 <main+0x7e>
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	01 c0       	rjmp	.+2      	; 0x108 <main+0x80>
 106:	8f e7       	ldi	r24, 0x7F	; 127
		//value = ReadADC();
		//value -=850;
		//value = abs(value);
		//PORTB = (uint8_t)(~(value));
		//PORTB = (uint8_t)(~(ReadADC()));
		PORTB = (uint8_t)(~(vumeter));
 108:	80 95       	com	r24
 10a:	88 bb       	out	0x18, r24	; 24
 10c:	ce 01       	movw	r24, r28
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <main+0x86>
 112:	c9 cf       	rjmp	.-110    	; 0xa6 <main+0x1e>
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	f8 cf       	rjmp	.-16     	; 0x108 <main+0x80>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
