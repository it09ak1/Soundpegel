
Klavier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000126  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000038  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000159  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f8  00000000  00000000  0000032b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001fe  00000000  00000000  00000423  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000624  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000df  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000030  00000000  00000000  00000743  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 39 00 	jmp	0x72	; 0x72 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5d 00 	call	0xba	; 0xba <main>
  64:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <updateLED>:
#include <math.h>

void updateLED()
{
	//PORTB = ~(def << i);
	PORTB = (uint8_t)(~(0b00000001));
  6c:	8e ef       	ldi	r24, 0xFE	; 254
  6e:	88 bb       	out	0x18, r24	; 24

}
  70:	08 95       	ret

00000072 <__vector_1>:

ISR(INT0_vect)		// Routine für INT0
{
  72:	1f 92       	push	r1
  74:	0f 92       	push	r0
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	0f 92       	push	r0
  7a:	11 24       	eor	r1, r1
  7c:	2f 93       	push	r18
  7e:	3f 93       	push	r19
  80:	8f 93       	push	r24
  82:	9f 93       	push	r25
  84:	ef 93       	push	r30
  86:	ff 93       	push	r31
#include <math.h>

void updateLED()
{
	//PORTB = ~(def << i);
	PORTB = (uint8_t)(~(0b00000001));
  88:	8e ef       	ldi	r24, 0xFE	; 254
  8a:	88 bb       	out	0x18, r24	; 24
  8c:	80 e2       	ldi	r24, 0x20	; 32
  8e:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  90:	29 e1       	ldi	r18, 0x19	; 25
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	f9 01       	movw	r30, r18
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <__vector_1+0x24>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  9a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  9c:	d9 f7       	brne	.-10     	; 0x94 <__vector_1+0x22>
	//PORTB = (uint8_t)(~(0b00000001));
	//showLED = 0b00000100;
	//i++;
	updateLED();
	_delay_ms(2000);
	GIFR &= ~(1 << INTF0);	// weitere angemeldete Interrupts löschen (Entprellung)
  9e:	8a b7       	in	r24, 0x3a	; 58
  a0:	8f 7b       	andi	r24, 0xBF	; 191
  a2:	8a bf       	out	0x3a, r24	; 58
}
  a4:	ff 91       	pop	r31
  a6:	ef 91       	pop	r30
  a8:	9f 91       	pop	r25
  aa:	8f 91       	pop	r24
  ac:	3f 91       	pop	r19
  ae:	2f 91       	pop	r18
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <main>:

int main(void)
{
	//uint8_t ledOut = 0b00000000;
	DDRB = 0xff;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x00;
  be:	11 ba       	out	0x11, r1	; 17
		{
			PORTB = (uint8_t)(~(0b11111111));
		}
		else
		{
			PORTB = (uint8_t)(~(0b00000000));
  c0:	7f ef       	ldi	r23, 0xFF	; 255
		{
			PORTB = (uint8_t)(~(0b00111111));
		}
		else if (PIND == 0b10111111)
		{
			PORTB = (uint8_t)(~(0b01111111));
  c2:	60 e8       	ldi	r22, 0x80	; 128
		{
			PORTB = (uint8_t)(~(0b00011111));
		}
		else if (PIND == 0b11011111)
		{
			PORTB = (uint8_t)(~(0b00111111));
  c4:	50 ec       	ldi	r21, 0xC0	; 192
		{
			PORTB = (uint8_t)(~(0b00001111));
		}
		else if (PIND == 0b11101111)
		{
			PORTB = (uint8_t)(~(0b00011111));
  c6:	40 ee       	ldi	r20, 0xE0	; 224
		{
			PORTB = (uint8_t)(~(0b00000111));
		}
		else if (PIND == 0b11110111)
		{
			PORTB = (uint8_t)(~(0b00001111));
  c8:	30 ef       	ldi	r19, 0xF0	; 240
		{
			PORTB = (uint8_t)(~(0b00000011));
		}
		else if (PIND == 0b11111011)
		{
			PORTB = (uint8_t)(~(0b00000111));
  ca:	28 ef       	ldi	r18, 0xF8	; 248
		{
			PORTB = (uint8_t)(~(0b00000001));
		}
		else if (PIND == 0b11111101)
		{
			PORTB = (uint8_t)(~(0b00000011));
  cc:	9c ef       	ldi	r25, 0xFC	; 252
		//{
			//PORTB = PIND;

			//selectedPIN = PIND;

		if (PIND == 0b11111110)
  ce:	80 b3       	in	r24, 0x10	; 16
  d0:	8e 3f       	cpi	r24, 0xFE	; 254
  d2:	11 f4       	brne	.+4      	; 0xd8 <main+0x1e>
		{
			PORTB = (uint8_t)(~(0b00000001));
  d4:	88 bb       	out	0x18, r24	; 24
  d6:	fb cf       	rjmp	.-10     	; 0xce <main+0x14>
		}
		else if (PIND == 0b11111101)
  d8:	80 b3       	in	r24, 0x10	; 16
  da:	8d 3f       	cpi	r24, 0xFD	; 253
  dc:	11 f4       	brne	.+4      	; 0xe2 <main+0x28>
		{
			PORTB = (uint8_t)(~(0b00000011));
  de:	98 bb       	out	0x18, r25	; 24
  e0:	f6 cf       	rjmp	.-20     	; 0xce <main+0x14>
		}
		else if (PIND == 0b11111011)
  e2:	80 b3       	in	r24, 0x10	; 16
  e4:	8b 3f       	cpi	r24, 0xFB	; 251
  e6:	11 f4       	brne	.+4      	; 0xec <main+0x32>
		{
			PORTB = (uint8_t)(~(0b00000111));
  e8:	28 bb       	out	0x18, r18	; 24
  ea:	f1 cf       	rjmp	.-30     	; 0xce <main+0x14>
		}
		else if (PIND == 0b11110111)
  ec:	80 b3       	in	r24, 0x10	; 16
  ee:	87 3f       	cpi	r24, 0xF7	; 247
  f0:	11 f4       	brne	.+4      	; 0xf6 <main+0x3c>
		{
			PORTB = (uint8_t)(~(0b00001111));
  f2:	38 bb       	out	0x18, r19	; 24
  f4:	ec cf       	rjmp	.-40     	; 0xce <main+0x14>
		}
		else if (PIND == 0b11101111)
  f6:	80 b3       	in	r24, 0x10	; 16
  f8:	8f 3e       	cpi	r24, 0xEF	; 239
  fa:	11 f4       	brne	.+4      	; 0x100 <main+0x46>
		{
			PORTB = (uint8_t)(~(0b00011111));
  fc:	48 bb       	out	0x18, r20	; 24
  fe:	e7 cf       	rjmp	.-50     	; 0xce <main+0x14>
		}
		else if (PIND == 0b11011111)
 100:	80 b3       	in	r24, 0x10	; 16
 102:	8f 3d       	cpi	r24, 0xDF	; 223
 104:	11 f4       	brne	.+4      	; 0x10a <main+0x50>
		{
			PORTB = (uint8_t)(~(0b00111111));
 106:	58 bb       	out	0x18, r21	; 24
 108:	e2 cf       	rjmp	.-60     	; 0xce <main+0x14>
		}
		else if (PIND == 0b10111111)
 10a:	80 b3       	in	r24, 0x10	; 16
 10c:	8f 3b       	cpi	r24, 0xBF	; 191
 10e:	11 f4       	brne	.+4      	; 0x114 <main+0x5a>
		{
			PORTB = (uint8_t)(~(0b01111111));
 110:	68 bb       	out	0x18, r22	; 24
 112:	dd cf       	rjmp	.-70     	; 0xce <main+0x14>
		}
		else if (PIND == 0b01111111)
 114:	80 b3       	in	r24, 0x10	; 16
 116:	8f 37       	cpi	r24, 0x7F	; 127
 118:	11 f4       	brne	.+4      	; 0x11e <main+0x64>
		{
			PORTB = (uint8_t)(~(0b11111111));
 11a:	18 ba       	out	0x18, r1	; 24
 11c:	d8 cf       	rjmp	.-80     	; 0xce <main+0x14>
		}
		else
		{
			PORTB = (uint8_t)(~(0b00000000));
 11e:	78 bb       	out	0x18, r23	; 24
 120:	d6 cf       	rjmp	.-84     	; 0xce <main+0x14>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
